I can’t directly fetch those specific files from the **zk-ticket-anti-scalp** repo right now (the connector search didn’t surface them by path), but I can give your agent a **drop-in `App.tsx`** that follows the same **Wouter + Sidebar** pattern we’ve been using across your projects, plus a **Dashboard** page template that matches the style (Tailwind, simple, accessible). If you want me to mirror a different router or component library you already have, paste any snippet and I’ll adapt instantly.

Below are two files your agent can use as a **styling baseline** for the **MyProof PAR** UI. They assume:

* **Wouter** for routing
* A left **Sidebar** with active route highlighting
* **Topbar** with title and optional search
* Pages live under `client/src/pages/*`
* Tailwind is configured (you already have `tailwind.config.ts`)

---

## `client/src/App.tsx` (routing + sidebar)

```tsx
import React, { useMemo } from "react";
import { Switch, Route, Link, useLocation } from "wouter";

// Pages
import Dashboard from "@/pages/Dashboard";
import Proofs from "@/pages/Proofs";
import Verification from "@/pages/Verification";
import StatusLists from "@/pages/StatusLists";
import AuditLogs from "@/pages/AuditLogs";
import Settings from "@/pages/Settings";
import ApiKeys from "@/pages/ApiKeys";  // new tab we’re adding

function NavItem({ href, label, icon }: { href: string; label: string; icon?: React.ReactNode }) {
  const [location] = useLocation();
  const active = location === href || (href !== "/" && location.startsWith(href));
  return (
    <Link href={href}>
      <a
        className={[
          "flex items-center gap-2 px-3 py-2 rounded",
          active ? "bg-black text-white" : "text-gray-800 hover:bg-gray-100"
        ].join(" ")}
      >
        {icon || null}
        <span className="text-sm font-medium">{label}</span>
      </a>
    </Link>
  );
}

function Sidebar() {
  return (
    <aside className="w-64 border-r bg-white h-screen sticky top-0">
      <div className="p-4 border-b">
        <div className="text-lg font-bold">MyProof Registry</div>
        <div className="text-xs text-gray-500">PII-free • Audit-ready</div>
      </div>
      <nav className="p-3 flex flex-col gap-1">
        <NavItem href="/" label="Dashboard" />
        <NavItem href="/proofs" label="Proof Assets" />
        <NavItem href="/verification" label="Verification" />
        <NavItem href="/status-lists" label="Status Lists" />
        <NavItem href="/audit-logs" label="Audit Logs" />
        <NavItem href="/api-keys" label="API Keys / Rotation" />
        <div className="mt-2 border-t pt-2">
          <NavItem href="/settings" label="Settings" />
        </div>
      </nav>
    </aside>
  );
}

function Topbar() {
  const [location] = useLocation();
  const title = useMemo(() => {
    if (location === "/") return "Dashboard";
    if (location.startsWith("/proofs")) return "Proof Assets";
    if (location.startsWith("/verification")) return "Verification";
    if (location.startsWith("/status-lists")) return "Status Lists";
    if (location.startsWith("/audit-logs")) return "Audit Logs";
    if (location.startsWith("/api-keys")) return "API Keys / Rotation";
    if (location.startsWith("/settings")) return "Settings";
    return "MyProof Registry";
  }, [location]);

  return (
    <header className="h-14 border-b flex items-center justify-between px-4 bg-white sticky top-0">
      <h1 className="text-base font-semibold">{title}</h1>
      <div className="text-xs text-gray-500">verifier_proof_ref • CID • W3C Status Lists</div>
    </header>
  );
}

export default function App() {
  return (
    <div className="flex">
      <Sidebar />
      <div className="flex-1 min-h-screen bg-gray-50">
        <Topbar />
        <main className="p-4">
          <Switch>
            <Route path="/" component={Dashboard} />
            <Route path="/proofs" component={Proofs} />
            <Route path="/verification" component={Verification} />
            <Route path="/status-lists" component={StatusLists} />
            <Route path="/audit-logs" component={AuditLogs} />
            <Route path="/api-keys" component={ApiKeys} />
            <Route path="/settings" component={Settings} />
            <Route> {/* 404 */}
              <div className="p-6">Not found.</div>
            </Route>
          </Switch>
        </main>
      </div>
    </div>
  );
}
```

---

## `client/src/pages/Dashboard.tsx` (example page template)

```tsx
import React, { useEffect, useState } from "react";

export default function Dashboard() {
  const [stats, setStats] = useState<any>(null);
  const [error, setError] = useState<string>("");

  useEffect(() => {
    let cancel = false;
    (async () => {
      try {
        const res = await fetch("/api/stats");
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();
        if (!cancel) setStats(data);
      } catch (e:any) {
        if (!cancel) setError(String(e.message || e));
      }
    })();
    return () => { cancel = true; };
  }, []);

  return (
    <div className="space-y-6">
      <section className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Stat title="Proof Assets" value={stats?.counts?.assets ?? '—'} />
        <Stat title="Valid (Status)" value={stats?.counts?.valid ?? '—'} />
        <Stat title="Revoked/Suspended" value={stats?.counts?.blocked ?? '—'} />
      </section>

      <section className="p-4 bg-white border rounded">
        <h2 className="font-semibold mb-2">Recent Activity</h2>
        {error && <div className="text-sm text-red-600">{error}</div>}
        {!stats && !error && <div className="text-sm text-gray-500">Loading…</div>}
        {stats?.recent?.length ? (
          <ul className="text-sm divide-y">
            {stats.recent.map((ev:any) => (
              <li key={ev.event_id} className="py-2 flex justify-between">
                <span className="font-mono">{ev.event_type}</span>
                <span className="text-gray-500">{new Date(ev.created_at).toLocaleString()}</span>
              </li>
            ))}
          </ul>
        ) : !error && <div className="text-sm text-gray-500">No events yet.</div>}
      </section>

      <section className="p-4 bg-white border rounded">
        <h2 className="font-semibold mb-2">Privacy Posture</h2>
        <ul className="list-disc pl-6 text-sm space-y-1 text-gray-700">
          <li>Zero PII stored (only hashes, CIDs, DIDs, status pointers).</li>
          <li>Re-verification via signed receipts (no proof payload storage).</li>
          <li>Revocation via W3C Bitstring Status Lists (fail-closed).</li>
          <li>Append-only transparency log; exportable for auditors.</li>
        </ul>
      </section>
    </div>
  );
}

function Stat({ title, value }: { title: string; value: string|number }) {
  return (
    <div className="p-4 bg-white border rounded">
      <div className="text-xs uppercase text-gray-500">{title}</div>
      <div className="text-2xl font-semibold">{value}</div>
    </div>
  );
}
```

---

## Notes for your agent

* This structure mirrors the **Wouter + Sidebar + Topbar** pattern we’ve used; styling is **Tailwind-first**, accessible, responsive.
* The **API Keys / Rotation** page we built earlier (`client/src/pages/ApiKeys.tsx`) will drop into this router at `/api-keys`.
* If your zk-ticket app has unique components (e.g., a `Sidebar` or `Shell` wrapper), paste them and I’ll adapt the markup to match **exact classNames, spacing, and themes**.

If you want me to **match the zk-ticket repo exactly**, send me any one of:

* `client/src/App.tsx`
* `client/src/components/Sidebar.tsx` (if exists)
* `client/src/pages/Dashboard.tsx`

…and I’ll output a **pixel-accurate** version for PAR.
