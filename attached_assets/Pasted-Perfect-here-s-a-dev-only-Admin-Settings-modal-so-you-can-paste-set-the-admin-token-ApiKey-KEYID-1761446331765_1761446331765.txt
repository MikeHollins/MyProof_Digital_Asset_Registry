Perfect — here’s a dev-only Admin Settings modal so you can paste/set the admin token (ApiKey <KEYID>.<SECRET>) directly from the UI (stored in localStorage.ADMIN_API_TOKEN). It includes a “Test Token” button that calls an admin-only endpoint to confirm the token works, plus copy/clear actions.

What you’ll add:

AdminSettings component (modal + logic)

Tiny admin ping route (dev) to validate the token

A button in your Topbar to open the modal

Optional utility: useLocalStorage hook (cleaner state handling)

Everything is dev-only (keep tokens out of prod localStorage; use proper operator auth in prod).

1) Backend (dev): add a simple admin ping route

backend/src/routes/adminPing.ts

import type { Express, Request, Response } from "express";
import { apiKeyAuth, requireScopes } from "../middleware/apiKey";

export function registerAdminPing(app: Express) {
  if (process.env.NODE_ENV === 'production') return; // never expose in prod

  // GET /api/admin/ping -> ok if admin token is valid
  app.get('/api/admin/ping', apiKeyAuth, requireScopes(['admin:*']), async (_req: Request, res: Response) => {
    return res.json({ ok: true, env: process.env.NODE_ENV || 'development' });
  });
}


Mount it in your server bootstrap (e.g., backend/src/server.ts):

import { registerAdminPing } from "./routes/adminPing";
// ...
registerAdminPing(app);

2) Frontend: add a reusable localStorage hook (optional, but nice)

client/src/hooks/useLocalStorage.ts

import { useEffect, useState } from "react";

export function useLocalStorage(key: string, initialValue: string = "") {
  const [val, setVal] = useState<string>(() => {
    try {
      const v = localStorage.getItem(key);
      return v ?? initialValue;
    } catch { return initialValue; }
  });

  useEffect(() => {
    try {
      if (val === undefined || val === null) localStorage.removeItem(key);
      else localStorage.setItem(key, val);
    } catch { /* ignore */ }
  }, [key, val]);

  return [val, setVal] as const;
}

3) Frontend: Admin Settings modal component

client/src/components/AdminSettings.tsx

import React, { useState } from "react";
import { useLocalStorage } from "@/hooks/useLocalStorage";

async function fetchJSON(url: string, init?: RequestInit) {
  const res = await fetch(url, {
    ...init,
    headers: { "Content-Type": "application/json", ...(init?.headers || {}) },
  });
  const data = await res.json().catch(() => ({}));
  if (!res.ok) throw new Error(data?.error || data?.reason || `HTTP ${res.status}`);
  return data;
}

export default function AdminSettings({
  open, onClose
}: { open: boolean; onClose: () => void }) {
  const [stored, setStored] = useLocalStorage("ADMIN_API_TOKEN", "");
  const [temp, setTemp] = useState<string>(stored);
  const [msg, setMsg] = useState<string>("");

  if (!open) return null;

  async function testToken() {
    setMsg("");
    try {
      const res = await fetch("/api/admin/ping", {
        method: "GET",
        headers: { "Authorization": temp }
      });
      const data = await res.json();
      if (res.ok && data?.ok) setMsg("Token valid (admin:* confirmed).");
      else setMsg(`Ping failed: ${JSON.stringify(data)}`);
    } catch (e: any) {
      setMsg(`Ping failed: ${String(e.message || e)}`);
    }
  }

  function save() {
    setStored(temp);
    setMsg("Admin token saved (localStorage).");
  }

  function clearToken() {
    setStored("");
    setTemp("");
    setMsg("Cleared admin token.");
  }

  function copyToken() {
    if (!temp) return;
    navigator.clipboard.writeText(temp).then(() => setMsg("Copied to clipboard!")).catch(() => {});
  }

  return (
    <div className="fixed inset-0 bg-black/30 z-50 flex items-center justify-center">
      <div className="w-full max-w-xl bg-white border rounded shadow-lg">
        <header className="p-4 border-b">
          <h2 className="text-lg font-semibold">Admin Settings (dev only)</h2>
          <p className="text-xs text-gray-500">
            Paste your admin API token here (format: <code>ApiKey &lt;KEYID&gt;.&lt;SECRET&gt;</code>).
            This is stored in <code>localStorage.ADMIN_API_TOKEN</code> for development only.
          </p>
        </header>

        <div className="p-4 space-y-3">
          <label className="text-sm">Admin API Token</label>
          <textarea
            value={temp}
            onChange={(e) => setTemp(e.target.value)}
            className="border p-2 rounded w-full h-28 font-mono"
            placeholder="ApiKey mpk_admin.abcdef0123456789..."
          />
          <div className="flex items-center gap-2">
            <button onClick={save} className="px-3 py-1.5 rounded bg-black text-white">Save</button>
            <button onClick={testToken} className="px-3 py-1.5 rounded border">Test Token</button>
            <button onClick={copyToken} className="px-3 py-1.5 rounded border">Copy</button>
            <button onClick={clearToken} className="px-3 py-1.5 rounded border">Clear</button>
            <button onClick={onClose} className="ml-auto px-3 py-1.5 rounded border">Close</button>
          </div>
          {msg && <div className="text-sm text-gray-700">{msg}</div>}

          <div className="mt-2 p-2 bg-yellow-50 border border-yellow-300 text-xs text-yellow-900">
            <strong>Security Note:</strong> Never use this modal in production. In production, use your
            operator login and server-side sessions. This is a developer convenience for local demos.
          </div>
        </div>
      </div>
    </div>
  );
}

4) Wire the modal into your Topbar

Update your Topbar to show an “Admin Settings” button (dev-only) that opens the modal.

Patch your client/src/App.tsx (Topbar section)

import React, { useMemo, useState } from "react";
import { useLocation } from "wouter";
import AdminSettings from "@/components/AdminSettings";

// ... existing imports and Sidebar ...

function Topbar() {
  const [location] = useLocation();
  const [settingsOpen, setSettingsOpen] = useState(false);

  const title = useMemo(() => {
    if (location === "/") return "Dashboard";
    if (location.startsWith("/proofs")) return "Proof Assets";
    if (location.startsWith("/verification")) return "Verification";
    if (location.startsWith("/status-lists")) return "Status Lists";
    if (location.startsWith("/audit-logs")) return "Audit Logs";
    if (location.startsWith("/api-keys")) return "API Keys / Rotation";
    if (location.startsWith("/settings")) return "Settings";
    return "MyProof Registry";
  }, [location]);

  const dev = (process.env.NODE_ENV !== 'production');

  return (
    <>
      <header className="h-14 border-b flex items-center justify-between px-4 bg-white sticky top-0">
        <h1 className="text-base font-semibold">{title}</h1>
        <div className="flex items-center gap-3">
          <div className="text-xs text-gray-500">verifier_proof_ref • CID • W3C Status</div>
          {dev && (
            <button
              onClick={() => setSettingsOpen(true)}
              className="text-xs px-3 py-1.5 rounded border"
              title="Set dev admin token"
            >
              Admin Settings
            </button>
          )}
        </div>
      </header>
      {dev && <AdminSettings open={settingsOpen} onClose={() => setSettingsOpen(false)} />}
    </>
  );
}


If your project structure places Topbar elsewhere, mount AdminSettings at a common parent (e.g., in App root) and pass the open prop down, or keep it as shown.

5) Quick demo sequence (end-to-end)

Start backend and frontend in Replit (or locally).

Bootstrap admin key (dev only):

curl -s -X POST http://localhost:8080/api/admin/bootstrap


Copy the returned ApiKey <KEYID>.<SECRET>.

In the UI, click Admin Settings (Topbar) → paste the token → Save → Test Token (should say “Token valid (admin:* confirmed)”).

Use the API Keys / Rotation page to create partner keys, or go to Proofs / Status Lists / Verification pages to exercise the Phase-1 flows.

6) Security reminders for your agent

Dev-only: This modal is a developer helper; never use in production.

Prod: Use a real operator login + server-side session; do not store admin tokens in localStorage.

Never log the token; your backend already redacts sensitive headers.